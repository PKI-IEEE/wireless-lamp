#include "balance_bot.h"
__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;

volatile int16_t accelX, accelY, accelZ;
volatile int16_t gyroX, gyroY, gyroZ;
volatile double accelXAngle, accelYAngle, accelZAngle, gyroXAngle, gyroYAngle, gyroZAngle;
volatile unsigned char counter = 0;
volatile float finalAngle;
volatile signed int lastSpeed = 0;
volatile float gyroOffset;
unsigned char buffer[10];

volatile float dTerm;
volatile float pTerm;
volatile float iTerm;
volatile float Kp;
volatile float Kd;
volatile float Ki;
volatile float K;
volatile float integratedError;
volatile float lastError;
volatile uint8_t Mul;

volatile uint8_t out = 0;

void botInit();
void calibrateGyro();
signed int updatePid(int targetPosition, signed int currentPoistion);
signed int constrain(float value, int lower, int upper);

void botInit() {

	dTerm = 0;
	pTerm = 0;
	iTerm = 0;
	K = 1;
	Kp = 10;
	Kd = 0;
	Ki = 0;
	integratedError = 0;
	lastError = 0;
	GPIOInit();
	SPIInit();
	UARTInit(9600);
	I2CInit();
	accelInit();
	calibrateGyro();
	motorInterfaceInit();

	motorEnable(1,ENABLE);
	setMotorMicroStep(1,STEP16);
	motorEnable(3,ENABLE);
	setMotorMicroStep(3,STEP16);

	//setAcceleration(32767);

	init_timer32(0, 720000); // 720000 100 Hz
	enable_timer32(0);
}

void calibrateGyro() {
	uint8_t  gyroXH, gyroXL;
	int16_t value;
	long accum = 0;
	int x = 0;
	for(x = 0; x<50; x++) {
		gyroXH = accelReadReg(MPU6050_RA_GYRO_XOUT_H);
		gyroXL = accelReadReg(MPU6050_RA_GYRO_XOUT_L);
		value = ((gyroXH<<8)|gyroXL);
		accum += (float)(value / 65.5);
		delay32Ms(1,2);
	}

	gyroOffset = accum / 50;

	ftoa(gyroOffset,buffer,4);
	buffer[9] = 0x0A;
	UARTSend(buffer,10);

}

void updateIMUData() {
	uint8_t accelXH, accelXL, accelYH, accelYL, accelZH, accelZL,
			gyroXH, gyroXL;

	accelXH = accelReadReg(MPU6050_RA_ACCEL_XOUT_H);
	accelXL = accelReadReg(MPU6050_RA_ACCEL_XOUT_L);

	accelYH = accelReadReg(MPU6050_RA_ACCEL_YOUT_H);
	accelYL = accelReadReg(MPU6050_RA_ACCEL_YOUT_L);

	accelZH = accelReadReg(MPU6050_RA_ACCEL_ZOUT_H);
	accelZL = accelReadReg(MPU6050_RA_ACCEL_ZOUT_L);

	gyroXH = accelReadReg(MPU6050_RA_GYRO_XOUT_H);
	gyroXL = accelReadReg(MPU6050_RA_GYRO_XOUT_L);

	accelX = ((accelXH<<8)|accelXL);
	accelY = ((accelYH<<8)|accelYL);
	accelZ = ((accelZH<<8)|accelZL);

	gyroX = ((gyroXH<<8)|gyroXL);

	gyroXAngle = (float)((gyroX / 65.5) - gyroOffset);

	float accelXSqrd = accelX * accelX;
	float accelZSqrd = accelZ * accelZ;

	float accelYRad = atan2(accelY, sqrt(accelXSqrd + accelZSqrd));

	accelYAngle = (float)(accelYRad * 57.2957795);

}

signed int updatePid(int targetPosition, signed int currentPoistion) {

	signed int	error = targetPosition - currentPoistion;

	pTerm = Kp * error;
	integratedError += error;
	iTerm = Ki * constrain(integratedError, -LOW_GAIN, HIGH_GAIN);
	dTerm = Kd * (error - lastError);
	lastError = error;
	return constrain((K*(pTerm + iTerm + dTerm)),-10000,10000);
}

signed int constrain(float value, signed int lower, signed int upper) {
	if(value < lower) {
		return lower;
	}
	else if(value >= upper) {
		return upper;
	}
	else {
		return (signed int)value;
	}
}

void TIMER32_0_IRQHandler(void) { // 100 Hz


	//counter++;
	updateIMUData();

	finalAngle = ((0.98) * (finalAngle + (gyroXAngle * dt))) + (0.02 * accelYAngle); // Complementary Filter with gyro integration


	signed int motorSpeed = updatePid(0, finalAngle);

//	if(finalAngle <= -0.1 || finalAngle >= 0.1) {
	if(motorSpeed == 0) {
		setMotorSpeed(1,0);
		setMotorSpeed(3,0);
	}
	else if(motorSpeed < 0 ) {
		motorSpeed = -(motorSpeed);
		setMotorDir(1,REVERSE);
		setMotorDir(3,REVERSE);
	}
	else if(motorSpeed > 0) {
		setMotorDir(1,FORWARD);
		setMotorDir(3,FORWARD);
	}

//	}

	if((finalAngle <= 45 && finalAngle >= -45)) {
		if(abs(motorSpeed - lastSpeed) > 10) {
			lastSpeed = motorSpeed;
			setMotorSpeed(1,(uint16_t)motorSpeed);
			setMotorSpeed(3,(uint16_t)motorSpeed);
		}
	}
	else {
		setMotorSpeed(1,0);
		setMotorSpeed(3,0);
	}

/*
	if(counter >= 200) {
		counter = 0;
		ftoa(finalAngle,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		ftoa(accelYAngle,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		ftoa(gyroXAngle,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		buffer[0] = 0x0A;
		UARTSend(buffer,1);
	}*/

  LPC_TMR32B0->IR = 1;			/* clear interrupt flag */
}

int main (void) {

    botInit();
 // buffer[0] = 'O';
  //buffer[1] = 'S';
 // buffer[2] = ':';
//  UARTSend(buffer,3);


  while (1)
  {



  }
}
