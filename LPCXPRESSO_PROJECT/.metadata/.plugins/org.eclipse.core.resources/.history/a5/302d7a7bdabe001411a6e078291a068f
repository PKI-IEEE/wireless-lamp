#include "balance_bot.h"
__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;

volatile int16_t accelX, accelY, accelZ;
volatile int16_t gyroX, gyroY, gyroZ;
volatile double accelXAngle, accelYAngle, accelZAngle, gyroXAngle, gyroYAngle, gyroZAngle;
volatile unsigned char counter = 0;
volatile float finalAngle;
volatile signed int filteredSpeed = 0;
volatile float gyroOffset;
unsigned char buffer[10];

volatile float dTerm;
volatile float pTerm;
volatile float iTerm;
volatile float pTermPos;
volatile float dTermPos;
volatile float iTermPos;
volatile float Kp;
volatile float Kd;
volatile float Ki;
volatile float KiPos;
volatile float KpPos;
volatile float KdPos;
volatile float integratedError;
volatile float lastError;
volatile uint8_t Mul;
volatile uint8_t out = 0;

volatile uint8_t motorOneDir;
volatile uint8_t motorTwoDir;

volatile signed int stepOffset;
volatile signed int lastStepOffset;
void botInit();
void calibrateGyro();
signed int updatePid(float targetPosition, float currentPoistion);
signed int constrain(float value, int lower, int upper);

void botInit() {

	dTerm = 0;
	pTerm = 0;
	iTerm = 0;
	pTermPos = 0;
	dTermPos = 0;
	Kp = 0.4; //0.5
	Kd = 0.5; //0.8
	Ki = 4; //12
	KpPos = -0.4;
	KdPos = -2;
	integratedError = 0;
	lastError = 0;

	stepOffset = 0;
	lastStepOffset = 0;
	GPIOInit();
	SPIInit();
	UARTInit(9600);
	I2CInit();
	accelInit();
	//calibrateGyro();
	motorInterfaceInit();

	motorEnable(1,ENABLE);
	setMotorMicroStep(1,STEP8);
	motorEnable(3,ENABLE);
	setMotorMicroStep(3,STEP8);

	GPIOSetDir(2,8,0); // step interrupt pin as input
	GPIOSetInterrupt(2,8,0,0,0);
	GPIOIntEnable(2,8);
	init_timer32(0, 720000); // 720000 100 Hz
	enable_timer32(0);
}

void calibrateGyro() {
	uint8_t  gyroXH, gyroXL;
	int16_t value;
	float accum = 0;
	int x = 0;
	for(x = 0; x<50; x++) {
		gyroXH = accelReadReg(MPU6050_RA_GYRO_XOUT_H);
		gyroXL = accelReadReg(MPU6050_RA_GYRO_XOUT_L);
		value = ((gyroXH<<8)|gyroXL);
		accum += (float)(value / GYRO_SENSE);
		delay32Ms(1,2);
	}

	gyroOffset = accum / 50;

	ftoa(gyroOffset,buffer,4);
	buffer[9] = 0x0A;
	UARTSend(buffer,10);

}

void updateIMUData() {
	long accelXAccum = 0;
	long accelYAccum = 0;
	long accelZAccum = 0;
	long gyroXAccum = 0;

	uint8_t accelXH, accelXL, accelYH, accelYL, accelZH, accelZL,
			gyroXH, gyroXL;

	uint8_t i = 0;
	for(i=0;i<5;i++) {
		accelXH = accelReadReg(MPU6050_RA_ACCEL_XOUT_H);
		accelXL = accelReadReg(MPU6050_RA_ACCEL_XOUT_L);
		accelX = ((accelXH<<8)|accelXL);

		accelYH = accelReadReg(MPU6050_RA_ACCEL_YOUT_H);
		accelYL = accelReadReg(MPU6050_RA_ACCEL_YOUT_L);
		accelY = ((accelYH<<8)|accelYL);

		accelZH = accelReadReg(MPU6050_RA_ACCEL_ZOUT_H);
		accelZL = accelReadReg(MPU6050_RA_ACCEL_ZOUT_L);
		accelZ = ((accelZH<<8)|accelZL);

		gyroXH = accelReadReg(MPU6050_RA_GYRO_XOUT_H);
		gyroXL = accelReadReg(MPU6050_RA_GYRO_XOUT_L);
		gyroX = ((gyroXH<<8)|gyroXL);

		accelXAccum+=accelX;
		accelYAccum+=accelY;
		accelZAccum+=accelZ;
		gyroXAccum+=gyroX;
	}


	accelX = accelXAccum / 5;
	accelY = accelYAccum / 5;
	accelZ = accelZAccum / 5;
	gyroX = gyroXAccum / 5;



	gyroXAngle = (float)((gyroX / GYRO_SENSE) - gyroOffset);

	float accelXSqrd = accelX * accelX;
	float accelZSqrd = accelZ * accelZ;

	float accelYRad = atan2(accelY, sqrt(accelXSqrd + accelZSqrd));

	accelYAngle = (float)(accelYRad * 57.2957795);

}

signed int updatePid(float targetPosition, float currentPoistion) {

	float error = targetPosition - currentPoistion;

	pTerm = Kp * error;
	integratedError += error;
	iTerm = Ki * constrain(integratedError, -LOW_GAIN, HIGH_GAIN);
	dTerm = Kd * (error - lastError);
	lastError = error;

	pTermPos = KpPos * stepOffset;
	dTermPos = KdPos * (stepOffset - lastStepOffset);
	lastStepOffset = stepOffset;

	return (pTerm + iTerm + dTerm + pTermPos + dTermPos);
}

signed int constrain(float value, signed int lower, signed int upper) {
	if(value < lower) {
		return lower;
	}
	else if(value > upper) {
		return upper;
	}
	else {
		return (signed int)value;
	}
}

void PIOINT2_IRQHandler(void) {
	if(motorOneDir == 1) {
		stepOffset--;
	}
	else {
		stepOffset++;
	}
/*
	if(stepOffset >= 70) {
		stepOffset = 70;
	}
	if(stepOffset <= -70) {
		stepOffset = -70;
	}*/
	GPIOIntClear(2,8);
}

void TIMER32_0_IRQHandler(void) { // 100 Hz


	//counter++;
	updateIMUData();

	finalAngle = ((0.98) * (finalAngle + (gyroXAngle * dt))) + (0.02 * accelYAngle); // Complementary Filter with gyro integration


	signed int motorSpeed = updatePid(-2.15, finalAngle);

	if(finalAngle == 0) {
		motorSpeed = 0;
	}
	else if(motorSpeed < 0 ) {
		motorSpeed = -(motorSpeed);
		setMotorDir(1,REVERSE);
		setMotorDir(3,REVERSE);
		motorOneDir = 0;
		motorTwoDir = 0;
	}
	else if(motorSpeed > 0) {
		setMotorDir(1,FORWARD);
		setMotorDir(3,FORWARD);
		motorOneDir = 1;
		motorTwoDir = 1;
	}

	//filteredSpeed = ((filteredSpeed * 0.70) + (motorSpeed * 0.30));
	if((finalAngle <= 40 && finalAngle >= -40)) {
		setMotorSpeed(1,(uint16_t)motorSpeed);
		setMotorSpeed(3,(uint16_t)motorSpeed);
	}
	else {
		integratedError = 0;
		stepOffset = 0;
		lastStepOffset = 0;
		setMotorSpeed(1,0);
		setMotorSpeed(3,0);
	}

	counter++;
	if(counter >= 120) {
		counter = 0;
		ftoa(stepOffset,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

	}

	/*
	if(counter >= 120) {
		counter = 0;
		ftoa(finalAngle,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		ftoa(motorSpeed,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		ftoa(filteredSpeed,buffer,4);
		buffer[9] = 0x0A;
		UARTSend(buffer,10);

		buffer[0] = 0x0A;
		UARTSend(buffer,1);
		UARTSend(buffer,1);
	}
*/
  LPC_TMR32B0->IR = 1;			/* clear interrupt flag */
}

int main (void) {

    botInit();

  while (1){}
}
